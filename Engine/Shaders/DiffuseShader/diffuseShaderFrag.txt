#version 330 core
in vec3 view_pos;
in vec3 fragPos;
in vec3 normal;
in vec3 color;
out vec4 frag_color;

struct light{
    vec3 position;
    vec3 color;
};

#define numLIGHTS 10
uniform light lightData[numLIGHTS];

void main()
{
    frag_color = vec4(0.0, 0.0, 0.0, 1.0);
    for (int i = 0; i < numLIGHTS; i++)
    {
        // ambient term
        float ambient_strength = 0.1;
        vec3 ambient = ambient_strength * lightData[i].color;

        // diffuse term
        vec3 norm = normalize(normal);
        vec3 lightDir = normalize(lightData[i].position - fragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightData[i].color;

        // specular term
        // vec3 viewDir = normalize(view_pos - fragPos);
        // float specular_strength = 0.3;

        // out color
        frag_color += vec4(color * (ambient + diffuse), 1.0);
    }
}